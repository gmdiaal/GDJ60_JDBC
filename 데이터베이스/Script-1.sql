SELECT * FROM tab;

SELECT * FROM REGIONS;
SELECT * FROM COUNTRIES;
SELECT * FROM LOCATIONS;

SELECT * FROM DEPARTMENTS;
SELECT * FROM EMPLOYEES;

SELECT * FROM JOBS;
SELECT * FROM JOB_HISTORY;

-----------------------------------------------------------------------
DESC LOCATION; --비버에선 안댐..

SELECT *
FROM LOCATIONS;

SELECT CITY, COUNTRY_ID 
FROM LOCATIONS;

SELECT * 
FROM EMPLOYEES;
--사원의 성, 이름 월급, 입사일

SELECT LAST_NAME, FIRST_NAME, SALARY, (SALARY*12) AS "YEAR SALARY", (SALARY*12)-5000 SAL, HIRE_DATE 입사일
--resultset에 있는 data를 조작해서 view로 띄움. 
FROM EMPLOYEES;

--함수 호출
SELECT SUM(SALARY)/COUNT(EMPLOYEE_ID) , AVG(SALARY)  ,SUM(SALARY*EMPLOYEE_ID)
FROM  EMPLOYEES;

SELECT SUM(SALARY*EMPLOYEE_ID)
FROM  EMPLOYEES;

--중복제거
SELECT DISTINCT DEPARTMENT_ID, --오와 열이 맞아야댐. EMPLOYEE_ID
--DISCONNECT SALARY --DISTINCT는 한번만 가능
FROM EMPLOYEES;

SELECT STATE_PROVINCE || '의 도시명은 ' || CITY
FROM LOCATIONS;

--where 
SELECT FIRST_NAME , SALARY , DEPARTMENT_ID 
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 90;
--임플로이 테이블에서, 디파트먼트ID=90이 TRUE인 값만. FROM -> WHERE -> SELECT

--사원의 정보 ,사원의ID ,직급, 입사일, 월급
--월급이 15000이상인 사람만
SELECT EMPLOYEE_ID, JOB_ID, HIRE_DATE, SALARY, DEPARTMENT_ID 
FROM EMPLOYEES
WHERE SALARY >= 8000 AND DEPARTMENT_ID = 100;

--웝글이 평균보다 많이 받는 사람만. 
SELECT EMPLOYEE_ID, JOB_ID, HIRE_DATE, SALARY, DEPARTMENT_ID 
FROM EMPLOYEES
--WHERE (SALARY*EMPLOYEE_ID)/EMPLOYEE_ID <= EMPLOYEE_ID;
--WHERE SUM(SALARY)/COUNT(EMPLOYEE_ID);
--WHERE SALARY > AVG(SALARY); --그룹 함수는 허가되지 않습니다

SELECT * 
FROM EMPLOYEES
WHERE COMMISSION_PCT IS NOT NULL;

SELECT * 
FROM EMPLOYEES
WHERE SALARY >=8000 and SALARY <=15000;

--BETWEEN-- 이상/이하
SELECT * 
FROM EMPLOYEES
WHERE SALARY BETWEEN 8000 AND 15000 --NOT BETWEEN

--부서번호가 60 or 100번
SELECT *
FROM EMPLOYEES
WHERE DEPARTMENT_ID =60 OR DEPARTMENT_ID =100;

SELECT *
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (60,100);

--사원의 모든 정보, last name이 Austin
SELECT *
FROM EMPLOYEES
WHERE LAST_NAME = 'Austin';

--사원의 모든 정보, 2004년 1월 1일 이후 입사.
SELECT *
FROM EMPLOYEES
WHERE HIRE_DATE > '2006/01/01';

--%, _
SELECT *
FROM EMPLOYEES
WHERE LAST_NAME LIKE '%k%' OR  LAST_NAME LIKE '%K%';

--사원의 급여순 출력
SELECT LAST_NAME ,SALARY 
FROM EMPLOYEES
ORDER BY 2 DESC, LAST_NAME ASC ; --앞 조건인 상태로 뒷 조건 추가.

--last name 오름차순
SELECT LAST_NAME, SALARY 
FROM EMPLOYEES
ORDER BY LAST_NAME ASC;

--사원 입사순
SELECT HIRE_DATE ,LAST_NAME
FROM EMPLOYEES
ORDER BY HIRE_DATE ASC ;


--1. 사원정보(Employees) 테이블에서 사원번호, 이름, 급여, 업무, 입사일, 상사의 사원번호를 출력
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY, JOB_ID, HIRE_DATE, MANAGER_ID 
FROM EMPLOYEES;

--2. 사원정보(Employees) 테이블에서 사원의 이름, 성, 급여와  연봉에 $100 보너스를 추가하여 계산한 값은 Increased Ann_Salary, 
--	 급여에 $100 보너스를 추가하여 계산한 연봉은 Increased Salary라는 별칭을 붙여 출력
SELECT FIRST_NAME, LAST_NAME, SALARY,SALARY+100 "Increased Salary" ,SALARY*12+100 "Increased Ann_Salary"
FROM EMPLOYEES;

--3. 예산 편성 문제로 급여 정보 보고서를 작성하려고 한다. 
--	사원정보(Employees) 테이블에서 급여가 $7,000~$10,000 범위 이외인 사람의 이름과 성 및 급여를 급여가 적은 순서로 출력
SELECT *
FROM EMPLOYEES
WHERE SALARY NOT BETWEEN 7000 AND 10000
ORDER BY SALARY ASC;

--4. 사원의 성(last_name) 중에 ‘e’ 및 ‘o’ 글자가 포함된 사원을 출력
SELECT LAST_NAME 
FROM EMPLOYEES
WHERE LAST_NAME LIKE '%e%' AND  LAST_NAME LIKE '%o%'

--5. 급여(salary)와 수당율(commission_pct)에 대한 지출 보고서를 작성하려고 한다. 
--   수당을 받는(null이 아닌) 모든 사원의 이름과 성, 급여, 업무, 수당율을 출력하시오. 
--   이때 급여가 큰 순서대로 정렬하되, 급여가 같으면 수당율이 큰 순서대로 정렬
SELECT LAST_NAME, SALARY ,COMMISSION_PCT 
FROM EMPLOYEES
WHERE COMMISSION_PCT IS NOT NULL
ORDER BY SALARY DESC, COMMISSION_PCT DESC ;

SELECT * FROM DEPARTMENTS
WHERE DEPARTMENT_ID = 20;

SELECT * FROM LOCATIONS
WHERE LOCATION_ID = 1000;

SELECT *
FROM LOCATIONS
WHERE STREET_ADDRESS LIKE '%'||'ia'||'%'; --AND '%%'

----
--- 100번 부서에 근무하는 사원들의 평균 급여와, 그 부서에 최고, 최소 급액.
SELECT *
FROM EMPLOYEES;

SELECT avg(salary), AVG(salary), MAX(salary) 
FROM EMPLOYEES 
WHERE DEPARTMENT_ID_ID =100;

---@GROUP BY
--부서별 
SELECT DEPARTMENT_ID , avg(salary), min(salary), MAX(salary) 
FROM EMPLOYEES 
WHERE NOT MANAGER_ID IS NULL 
GROUP BY DEPARTMENT_ID
--부서의 평균급여가 10000이상
HAVING avg(salary)<10000
ORDER BY 2 DESC ; 

--매니저별 사원수
SELECT MANAGER_ID , COUNT(employee_id)
FROM EMPLOYEES
GROUP BY MANAGER_ID
HAVING manager_id IS NOT NULL;
--where는 from 하나마다 having은 그룹마다 조건을 줌.
COMMIT;

---------단일함수-----

--null 함수
SELECT *FROM DEPARTMENTS;
SELECT DEPARTMENT_NAME, nvl(MANAGER_ID, 200)
FROM DEPARTMENTS;

SELECT SUM(COMMISSION_PCT)/COUNT(EMPLOYEE_ID), AVG(COMMISSION_PCT)  
FROM EMPLOYEES;

SELECT SUM(COMMISSION_PCT)/COUNT(EMPLOYEE_ID), AVG(NVL(COMMISSION_PCT,0) )  
FROM EMPLOYEES

SELECT DEPARTMENT_NAME , NVL2(MANAGER_ID, 100, 200) 
FROM DEPARTMENTS

--숫자함수
SELECT ABS(-3.33) FROM DUAL; 
SELECT FLOOR(2.22) FROM dual; --.아래 버리기
SELECT ROUND(17.777, -1 ) 
FROM dual; 
--문자함수
SELECT DEPARTMENT_ID , UPPER(DEPARTMENT_NAME) 
FROM DEPARTMENTS 

--오라클에선 영어 한글자가 1byte 한글은 2~3byte

SELECT LPAD('abc',10,'*') FROM DUAL ; 

SELECT SUBSTR('mydata',0,1)
FROM DUAL;
--'mydata' -->m*****
SELECT RPAD( SUBSTR('mydata',0,1), LENGTH ('mydata') ,'*' )  
FROM DUAL;


SELECT EMPLOYEE_ID ,RPAD(SUBSTR(FIRST_NAME,0,1),LENGTH (FIRST_NAME),'*'), FIRST_NAME 
FROM EMPLOYEES;

SELECT SYSDATE, SYSTIMESTAMP ,CURRENT_DATE , CURRENT_TIMESTAMP 
FROM DUAL ;

SELECT  SYSDATE, SYSDATE+3
FROM DUAL ;

SELECT FLOOR(  MONTHS_BETWEEN(SYSDATE,HIRE_DATE) )
FROM EMPLOYEES;

SELECT NEXT_DAY(SYSDATE,3)  
FROM dual; 

SELECT LAST_DAY(SYSDATE)
FROM DUAL;

SELECT SYSDATE, TO_CHAR(SYSDATE, 'YYYY-MM-DD DAY') 
FROM DUAL;

SELECT TRIM('a' FROM 'aaabbbccc') FROM dual;

---toChar
SELECT TO_CHAR(1234,'9,999,999') FROM DUAL ; 

---toNumber
SELECT TO_NUMBER('1234')*2 FROM DUAL ; 
SELECT TO_NUMBER('1,234', '9,999' )*2 FROM DUAL ; 
SELECT TO_NUMBER('1.234' )*2 FROM DUAL ;
SELECT TO_NUMBER('1.234','9.999' )*2 FROM DUAL ;

--toDate
SELECT TO_DATE('2222/11-11') FROM DUAL ; 

SELECT * FROM EMPLOYEES;


---------INSERT-----------
-- 1. INSERT INTO 테이블명 (컬럼1, 컬럼2, ...) values(값1, 값2, ....)


INSERT INTO REGIONS (REGION_NAME, REGION_ID)
VALUES ('baba', 8);

SELECT * FROM REGIONS;

INSERT INTO REGIONS (REGION_ID)
VALUES (6);

INSERT INTO REGIONS (REGION_NAME, REGION_ID)
VALUES (NULL, 7);

--INSERT INTO REGIONS (REGION_ID, REGION_NAME)
--VALUES(NULL, NULL);

INSERT INTO REGIONS 
VALUES (9, 'test');

--INSERT INTO REGIONS 
--VALUES (11);

DELETE REGIONS WHERE REGION_ID = 8;
DELETE REGIONS WHERE REGION_ID = 7 OR REGION_ID = 8 
DELETE REGIONS WHERE REGION_ID IN (7,8)

DELETE REGIONS WHERE REGION_NAME IS NULL;
DELETE REGIONS WHERE REGION_NAME LIKE 'test';

SELECT * FROM COUNTRIES;

INSERT INTO COUNTRIES (COUNTRY_ID, COUNTRY_NAME, REGION_ID)
VALUES('ZZ', 'TEST',2);

--INSERT INTO COUNTRIES (COUNTRY_ID, COUNTRY_NAME, REGION_ID)
--VALUES('ZA', 'TEST2',10);
--
--DELETE REGIONS WHERE REGION_ID = 2;

SELECT * FROM DEPARTMENTS; 
SELECT * FROM LOCATIONS;
SELECT * FROM SEQ;

INSERT INTO DEPARTMENTS (DEPARTMENT_ID, DEPARTMENT_NAME , MANAGER_ID, LOCATION_ID)
VALUES (DEPARTMENTS_SEQ.NEXTVAL, 'test', NULL, 1700);

--연습@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

SELECT * FROM DEPARTMENTS WHERE DEPARTMENT_NAME LIKE '%e%' AND LOCATION_ID = 1700; 

SELECT * FROM DEPARTMENTS WHERE DEPARTMENT_NAME LIKE '%el%' OR DEPARTMENT_NAME LIKE '%es%';

INSERT INTO DEPARTMENTS ( DEPARTMENT_ID, DEPARTMENT_NAME , MANAGER_ID , LOCATION_ID  )
VALUES (DEPARTMENTS_SEQ.NEXTVAL, 'Test2', NULL, 1700 );

SELECT * FROM DEPARTMENTS;

ROLLBACK;
COMMIT;

UPDATE DEPARTMENTS SET MANAGER_ID = 200 WHERE DEPARTMENT_ID = 120;

UPDATE DEPARTMENTS SET DEPARTMENT_NAME = 'ItTest', MANAGER_ID =200
WHERE DEPARTMENT_ID = 290;

UPDATE EMPLOYEES SET LAST_NAME = '||m m||' WHERE EMPLOYEE_ID =210;
COMMIT;

INSERT INTO EMPLOYEES (EMPLOYEE_ID, LAST_NAME, EMAIL, HIRE_DATE, JOB_ID)
VALUES (DEPARTMENTS_SEQ.NEXTVAL, 'TEST', 'TEST', sysdate, 'test');

----------------function-------------------
--더미 테이블
SELECT 1+1
FROM DUAL;

--SUM
SELECT SALARY FROM EMPLOYEES;
SELECT SUM(SALARY) FROM EMPLOYEES; 

SELECT SUM(SALARY), AVG(SALARY), COUNT(SALARY)
, max(SALARY) , min(SALARY)
FROM EMPLOYEES; 

SELECT min(HIRE_DATE), max(HIRE_DATE)
FROM EMPLOYEES;

SELECT avg(HIRE_DATE)
FROM EMPLOYEES;

SELECT MAX(LAST_NAME)
FROM EMPLOYEES;

----
--다항함수----


SELECT LOCATION_ID  
FROM DEPARTMENTS 
WHERE DEPARTMENT_ID IN (
(SELECT DEPARTMENT_ID  
FROM EMPLOYEES
WHERE last_name like 'King')
);

--

SELECT DEPARTMENT_ID  
FROM EMPLOYEES
WHERE last_name like 'King';




SELECT REGION_NAME 
FROM REGIONS
WHERE REGION_ID =
	(SELECT REGION_ID 
	FROM COUNTRIES
	WHERE COUNTRY_ID =
		(SELECT COUNTRY_ID  
		FROM LOCATIONS
		WHERE LOCATION_ID =
			(SELECT LOCATION_ID  
			FROM DEPARTMENTS 
			WHERE DEPARTMENT_ID = 
				(SELECT DEPARTMENT_ID  
				FROM EMPLOYEES
				WHERE last_name like 'Austin'
			)
		)
	)
);

--사원들의 정보. 평균 급여보다 많이 받는.
SELECT * 
FROM EMPLOYEES
WHERE SALARY > (SELECT AVG(SALARY) FROM EMPLOYEES );

--FIRST name john의 관리자의 FIRST name
SELECT FIRST_NAME 
FROM EMPLOYEES
WHERE EMPLOYEE_ID = ( --MANAGER_ID가 100인 사람의 EMPLOYEE_ID

SELECT MANAGER_ID 
FROM EMPLOYEES
WHERE FIRST_NAME = 'Lex'
);

--사원들 중에서 급여를 제일 많이 받는 사원과 같은 부서에 근무하는 사원들의 평균급여
SELECT AVG(salary) 
FROM EMPLOYEES
WHERE DEPARTMENT_ID  = (

SELECT DEPARTMENT_ID 
FROM EMPLOYEES
WHERE SALARY = (SELECT max(SALARY) FROM EMPLOYEES )
);

--가장 오래된, 최근된
SELECT 'a', 'b'

SELECT 
(SELECT FIRST_NAME 
FROM EMPLOYEES
WHERE HIRE_DATE = (SELECT MIN(HIRE_DATE)  FROM EMPLOYEES))
, (SELECT FIRST_NAME 
FROM EMPLOYEES
WHERE HIRE_DATE = (SELECT MIN(HIRE_DATE)  FROM EMPLOYEES))
 FROM DUAL ;

-- +1열 추가
SELECT * FROM REGIONS;
INSERT INTO REGIONS (region_id, REGION_NAME)
values( (SELECT MAX(REGION_ID)+1 FROM REGIONS) , 'mars')

--
SELECT a.SALARY  FROM
(
SELECT LAST_NAME ,SALARY ,DEPARTMENT_ID 
FROM EMPLOYEES
) a;


--도시명이 씨애틀. 에 근무하는 사원들의 모든 정보.
SELECT city FROM LOCATIONS;

SELECT LOCATION_ID 
FROM LOCATIONS
WHERE CITY = 'Seattle';

SELECT DEPARTMENT_ID 
FROM DEPARTMENTS
WHERE LOCATION_ID = 1700;

SELECT *
FROM EMPLOYEES
WHERE DEPARTMENT_ID = IN(30, 10,)
SELECT * FROM EMPLOYEES;
---subquery연습
--1. 사번이 198인 사원이 근무하는 부서가// 있는 도시가 속해 있는 나라가// 있는 대륙 정보

SELECT REGION_NAME 
FROM REGIONS
WHERE REGION_ID = (

SELECT REGION_ID 
FROM COUNTRIES
WHERE COUNTRY_ID = (
SELECT COUNTRY_ID  
FROM LOCATIONS
WHERE LOCATION_ID = (
SELECT LOCATION_ID
FROM DEPARTMENTS
WHERE DEPARTMENT_ID =(
SELECT DEPARTMENT_ID 
FROM EMPLOYEES
WHERE EMPLOYEE_ID = 198
)
)
)
);
--2. LAST_NAME이 Khoo 인 사람의 근무하는 부서명

SELECT DEPARTMENT_NAME 
FROM DEPARTMENTS
WHERE DEPARTMENT_ID =(

SELECT DEPARTMENT_ID 
FROM EMPLOYEES
WHERE LAST_NAME = 'Khoo'
);
--3. 사원번호가 199번인 사원의 매니저가 근무하는 /부서가 있는 나라명 출력

SELECT COUNTRY_NAME 
FROM COUNTRIES 
WHERE COUNTRY_ID = (

SELECT  COUNTRY_ID 
FROM LOCATIONS
WHERE LOCATION_ID = (

SELECT LOCATION_ID 
FROM DEPARTMENTS
WHERE DEPARTMENT_ID = (

SELECT DEPARTMENT_ID 
FROM EMPLOYEES
WHERE EMPLOYEE_ID = 199
)
)
)
--4. 사원들 중에서 월급이 가장 적은 사원이 근무하는 도시명

SELECT CITY 
FROM LOCATIONS
WHERE LOCATION_ID = (

SELECT LOCATION_ID 
FROM DEPARTMENTS
WHERE DEPARTMENT_ID = ( 

SELECT DEPARTMENT_ID 
FROM EMPLOYEES
WHERE SALARY = (

SELECT MIN(SALARY) 
FROM EMPLOYEES
)
)
);
--5. 부서명이 IT인 부서에 근무하는 사원들의 모든 정보 출력
SELECT *
FROM EMPLOYEES
WHERE DEPARTMENT_ID = (

SELECT DEPARTMENT_ID 
FROM DEPARTMENTS
WHERE DEPARTMENT_NAME = 'IT'
)
--6. Employees 테이블에서 LAST_NAME이 Greenberg 사원보다 급여를 더 많이 받고 있는 사원들정보 출력
SELECT *
FROM EMPLOYEES e 
WHERE SALARY > (

SELECT SALARY 
FROM EMPLOYEES e 
WHERE LAST_NAME = 'Greenberg' 
)
--7. 부서별 최소급여를 받고 있는 사원의 정보 출력
--
SELECT *
FROM EMPLOYEES
WHERE EMPLOYEE_ID IN (

SELECT EMPLOYEE_ID 
FROM EMPLOYEES 
WHERE SALARY IN (

SELECT MIN(SALARY)
FROM EMPLOYEES
WHERE DEPARTMENT_ID IS NOT NULL 
GROUP BY DEPARTMENT_ID 
)

)
--8. 도시이름이 'S'로시작하는 지역에 근무하는 사원의 정보 출력	

SELECT *
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN  (

SELECT DEPARTMENT_ID 
FROM DEPARTMENTS
WHERE  LOCATION_ID IN (

SELECT LOCATION_ID 
FROM LOCATIONS
WHERE 'S' IN ( SELECT SUBSTR(CITY, 0,1) FROM LOCATIONS )
)
)
--9. 성이 Austin 사원의 매니저(상사)가 근무하는 부서의 평균 급여보다 부서평균이 더 큰 부서의 이름

SELECT DEPARTMENT_NAME 
FROM DEPARTMENTS
WHERE DEPARTMENT_ID IN (

	SELECT DEPARTMENT_ID
	FROM EMPLOYEES
	WHERE DEPARTMENT_ID IS NOT NULL 
	GROUP BY DEPARTMENT_ID
	HAVING AVG(SALARY) > (
	
		SELECT AVG(SALARY)  
		FROM EMPLOYEES
		WHERE EMPLOYEE_ID  = (
		
			SELECT MANAGER_ID  
			FROM EMPLOYEES
			WHERE LAST_NAME = 'Austin'
		)
	)
)


----JOIN

--사원번호가 100번인 사원의 이름과 부서명
SELECT E.FIRST_NAME , D.DEPARTMENT_NAME, E.DEPARTMENT_ID 
FROM EMPLOYEES E 
	INNER JOIN DEPARTMENTS D 
	ON (E.DEPARTMENT_ID = D.DEPARTMENT_ID)
WHERE E.EMPLOYEE_ID = 100

--부서번호가 30번인 부서에 근무하는 사원의 정보(이름, 월급,부서명, 부서id, 나라명, 등) 출력

SELECT e.FIRST_NAME , e.SALARY , d.DEPARTMENT_NAME ,d.DEPARTMENT_ID , l.CITY , c.COUNTRY_NAME , r.REGION_NAME 
FROM EMPLOYEES e 
	INNER JOIN DEPARTMENTS d 
	ON (e.DEPARTMENT_ID = d.DEPARTMENT_ID)
	INNER JOIN LOCATIONS l 
	USING (LOCATION_ID)--ON (l.LOCATION_ID = d.LOCATION_ID)
	INNER  JOIN COUNTRIES c 
	ON (c.COUNTRY_ID = l.COUNTRY_ID)
	INNER JOIN REGIONS r 
	USING (REGION_ID)
WHERE e.DEPARTMENT_ID = 30;

----USING
--JOIN 조건 중에서 컬럼명이 같을 경우 사용. 
--USING에 사용된 culumn은 별명호출을 못함 (융합됨.)

----
--30번 부서에 근무하는 사원들 중에 가장 월급이 많은 사원의 월급보다 많이 받는사원의
--이름, 월급, 부서명, 도시명을 출력
SELECT FIRST_NAME , SALARY , d.DEPARTMENT_NAME, D.DEPARTMENT_ID , CITY
FROM EMPLOYEES e 
	INNER JOIN DEPARTMENTS d 
	ON (e.DEPARTMENT_ID = d.DEPARTMENT_ID) --USING(DEPARTMENT_ID) --
	INNER JOIN LOCATIONS l 
	USING (LOCATION_ID)
WHERE SALARY > ( SELECT MAX(SALARY) FROM EMPLOYEES e WHERE DEPARTMENT_ID =30 );

--SELF JOIN 같은 테이블을 join
--사원들의 이름 등, 매니저의 이름 등.
SELECT e.FIRST_NAME , e.SALARY , e2.FIRST_NAME MANAGER , e2.SALARY 
FROM EMPLOYEES e 
JOIN EMPLOYEES e2
ON (E2.EMPLOYEE_ID= E.MANAGER_ID );

--부서명, 부서관리자의 이름, 월급, 입사일

SELECT d.DEPARTMENT_NAME , e.FIRST_NAME , e.SALARY
FROM DEPARTMENTS d 
	LEFT OUTER JOIN EMPLOYEES e 
	ON (d.MANAGER_ID = e.EMPLOYEE_ID);

--최소급8200 최대급 16000의 정보들...
SELECT E.EMPLOYEE_ID , E.SALARY, J.JOB_TITLE 
FROM EMPLOYEES e 
	INNER JOIN JOBS j 
	ON ( E.SALARY BETWEEN 8200 AND 16000 );

--NATURAL JOIN /WHERE 안댐.
SELECT E.FIRST_NAME , D.DEPARTMENT_NAME
FROM EMPLOYEES E 
	NATURAL JOIN DEPARTMENTS D;
--WHERE E.EMPLOYEE_ID = 100


----JOIN END

----DDL
CREATE TABLE TEST (
	NAME VARCHAR2 (100),
	NUM NUMBER,
	KOR NUMBER(3),
	AV NUMBER(5, 2)
);

SELECT *
FROM TEST;

INSERT INTO TEST (NAME,NUM,KOR,AV)
VALUES('NAME1',1,2,3);

INSERT INTO TEST
VALUES ('NAME2',4,5,6);

INSERT INTO TEST
VALUES ('',4,5,6);

DROP TABLE TEST;

---DDL END




